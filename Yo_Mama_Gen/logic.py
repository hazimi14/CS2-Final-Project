from PyQt6.QtGui import QPixmap, QStandardItemModel, QStandardItem
from PyQt6.QtWidgets import *
from gui import *
import openai
import os
import csv
from typing import List, Dict

"""This project uses code logic adapted with assistance from ChatGPT (OpenAI, 2025).
Specifically:
Help was used to structure the API call logic inside the "generate" method.
Help was also used to implement logic for saving jokes into their appropriate categorical columns in the CSV file inside the "save_joke_to_csv" method.
"""

"""
NOTE TO REESTMAN:
This project requires an OpenAI API key.
I have added it below but if you care about security, you can create a .env file and put this line:
OPENAI_API_KEY=sk-...
"""


openai.api_key = "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"

adjectives: List[str] = [
    "fat", "ugly", "tall", "short", "bald", "lazy", "slow",
    "broke", "loud", "smelly", "weird", "old", "clumsy", "dumb"
]


class Logic(QMainWindow, Ui_MainWindow):
    """Logic class for the Yo Mama Joke Generator"""

    def __init__(self) -> None:
        """Initializes the GUI and connects all button logic."""
        super().__init__()
        self.setupUi(self)

        for word in adjectives:
            self.insult_drop.addItem(word)

        self.generate_button.clicked.connect(self.generate)
        self.submit_entry_button.clicked.connect(self.save_entry)
        self.save_joke_button.clicked.connect(self.save_generated)
        self.see_list_button.clicked.connect(lambda: (self.stackedWidget.setCurrentIndex(1), self.load_jokes()))
        self.back_button.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))


        #checks to see if first line in "jokes.csv" is the categories, if it is, don't write it again.
        try:
            with open("jokes.csv", "r") as csvfile:
                reader = csv.reader(csvfile)
                for row in reader:
                    if row == adjectives:
                        break
                else:
                    raise FileNotFoundError  # Will trigger re-write
        except Exception:
            with open("jokes.csv", 'w', newline='') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(adjectives)


    def generate(self) -> None:
        """Generates a Yo Mama joke using OpenAI API based on selected insult category."""

        #clears confirm label
        self.confirm_label.clear()

        adjective = self.insult_drop.currentText().strip()

        #this is the prompt that will be asked to chatgpt
        prompt = f"Generate a funny 'Yo Mama' joke that describes someone who is {adjective}?"

        #API call chatgpt and receive a response
        try:
            response = openai.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "You are a funny comedian that tells Yo Mama jokes."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.9,
                max_tokens=60
            )

            #only take the joke part of chat's response
            joke = response.choices[0].message.content.strip()
            self.joke_label.setText(joke)
        except Exception as e:
            self.joke_label.setText("Error generating joke.")
            print(f"API Error: {e}")

    def save_joke_to_csv(self, adjective: str, joke: str) -> None:
        """Saves a joke into the correct category column in jokes.csv."""
        rows: List[Dict[str, str]] = []

        #checks to see that "jokes.csv" exists
        if os.path.exists("jokes.csv"):
            with open("jokes.csv", 'r', newline='') as f:
                reader = csv.DictReader(f)
                rows = list(reader)

        #checks current row to see if there are any open spots
        filled = False
        for row in rows:
            #if spot is open, set the joke to that spot
            if row.get(adjective, "") == "":
                row[adjective] = joke
                filled = True
                break

        # if there are no spots open in the row, create a new row
        if not filled:
            new_row = {adj: "" for adj in adjectives}
            new_row[adjective] = joke
            rows.append(new_row)


        #rewrite everything for active updates.
        with open("jokes.csv", 'w', newline='') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=adjectives)
            writer.writeheader()
            writer.writerows(rows)

    def save_generated(self) -> None:
        """Saves a joke that was generated by the AI into the appropriate category."""
        adjective = self.insult_drop.currentText().strip()
        joke = self.joke_label.text().strip()

        if adjective and joke:
            self.save_joke_to_csv(adjective, joke)
            self.joke_label.clear()
            self.confirm_label.setText("Joke Saved")

    def save_entry(self) -> None:
        """Saves a user-written joke to the correct category after confirmation."""
        adjective = self.insult_drop.currentText().strip()
        joke = self.joke_entry.text().strip()

        #if the entry box is empty but they clicked submit, return so it does nothing
        if not joke:
            return

        #shows a confirmation notification to make sure user is submitting into the right category
        reply = QMessageBox.question(
            self,
            "Confirm Submission",
            f"Are you sure you want to save this joke under '{adjective}'?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )

        if reply == QMessageBox.StandardButton.Yes:
            self.save_joke_to_csv(adjective, joke)
            self.joke_label.clear()
            self.joke_entry.clear()
            self.confirm_label.setText("Joke Saved")

    def load_jokes(self) -> None:
        """Loads all saved jokes from CSV and displays them in the GUI table. updates everytime show_list button is pushed"""
        try:
            with open("jokes.csv", 'r', newline='') as csvfile:
                reader = csv.reader(csvfile)
                data = list(reader)

            #if there is no data, return and do nothing
            if not data:
                return

            headers = data[0]
            rows = data[1:]

            model = QStandardItemModel()
            model.setHorizontalHeaderLabels(headers)

            for row in rows:
                items = [QStandardItem(cell) for cell in row]
                model.appendRow(items)

            self.tableView.setModel(model)

        except Exception as e:
            print(f"Failed to load jokes: {e}")
